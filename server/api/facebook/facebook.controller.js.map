{"version":3,"sources":["api/facebook/facebook.controller.js"],"names":["index","show","create","upsert","patch","destroy","fields","accessTokenUrl","graphApiUrl","join","respondWithResult","res","statusCode","entity","status","json","patchUpdates","patches","apply","err","reject","save","removeEntity","remove","then","end","handleEntityNotFound","handleError","send","req","find","exec","catch","findById","params","id","code","body","client_id","facebook","clientID","client_secret","clientSecret","redirect_uri","redirectUri","get","url","qs","response","accessToken","message","error","profile","findOne","existingUser","token","_id","role","user","username","first_name","last_name","email","provider","findOneAndUpdate","setDefaultsOnInsert","runValidators"],"mappings":"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","file":"api/facebook/facebook.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/facebook              ->  index\n * POST    /api/facebook              ->  create\n * GET     /api/facebook/:id          ->  show\n * PUT     /api/facebook/:id          ->  upsert\n * PATCH   /api/facebook/:id          ->  patch\n * DELETE  /api/facebook/:id          ->  destroy\n */\n\n'use strict';\n\nimport jsonpatch from 'fast-json-patch';\nimport Facebook from './facebook.model';\nimport config from '../../config/environment';\nimport User from '../user/user.model';\nimport {signToken} from '../../auth/auth.service';\n\nconst fields = ['id', 'email', 'first_name', 'last_name', 'link', 'name'];\nvar accessTokenUrl = 'https://graph.facebook.com/v2.5/oauth/access_token';\nvar graphApiUrl = 'https://graph.facebook.com/v2.5/me?fields=' + fields.join(',');\n\nimport request from 'request';\n\nfunction respondWithResult(res, statusCode) {\n  statusCode = statusCode || 200;\n  return function(entity) {\n    if(entity) {\n      return res.status(statusCode).json(entity);\n    }\n    return null;\n  };\n}\n\nfunction patchUpdates(patches) {\n  return function(entity) {\n    try {\n      jsonpatch.apply(entity, patches, /*validate*/ true);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return entity.save();\n  };\n}\n\nfunction removeEntity(res) {\n  return function(entity) {\n    if(entity) {\n      return entity.remove()\n        .then(() => {\n          res.status(204).end();\n        });\n    }\n  };\n}\n\nfunction handleEntityNotFound(res) {\n  return function(entity) {\n    if(!entity) {\n      res.status(404).end();\n      return null;\n    }\n    return entity;\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    res.status(statusCode).send(err);\n  };\n}\n\n// Gets a list of Facebooks\nexport function index(req, res) {\n  return Facebook.find().exec()\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Gets a single Facebook from the DB\nexport function show(req, res) {\n  return Facebook.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Creates a new Facebook in the DB\nexport function create(req, res) {\n  var params = {\n    code: req.body.code,\n    client_id: config.facebook.clientID,\n    client_secret: config.facebook.clientSecret,\n    redirect_uri: req.body.redirectUri\n  }\n  request.get({url: accessTokenUrl, qs:params, json: true }, function(err, response, accessToken){\n    if (response.statusCode !== 200) {\n        return res.status(500).send({ message: accessToken.error.message });\n      }\n    // Step 2. Retrieve profile information about the current user.\n    request.get({ url: graphApiUrl, qs: accessToken, json: true }, function(err, response, profile) {\n      if (response.statusCode !== 200) {\n        return res.status(500).send({ message: profile.error.message });\n      }\n        // Step 3. Create a new user account or return an existing one.\n        User.findOne({ 'facebook.id': profile.id }, function(err, existingUser) {\n          if (existingUser) {\n            var token = signToken(existingUser._id, existingUser.role);\n            return res.json({ token });\n          }\n          var user = new User({\n            username: profile.first_name + ' ' + profile.last_name,\n            email: profile.email,\n            role: 'user',\n            provider: 'facebook',\n            facebook: {\n              id: profile.id\n            }\n          });\n          user.save(function() {\n            var token = signToken(user._id, user.role);\n            res.json({ token });\n          });\n        });\n    })\n  })\n}\n\n// Upserts the given Facebook in the DB at the specified ID\nexport function upsert(req, res) {\n  if(req.body._id) {\n    delete req.body._id;\n  }\n  return Facebook.findOneAndUpdate({_id: req.params.id}, req.body, {upsert: true, setDefaultsOnInsert: true, runValidators: true}).exec()\n\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Updates an existing Facebook in the DB\nexport function patch(req, res) {\n  if(req.body._id) {\n    delete req.body._id;\n  }\n  return Facebook.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(patchUpdates(req.body))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Deletes a Facebook from the DB\nexport function destroy(req, res) {\n  return Facebook.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(removeEntity(res))\n    .catch(handleError(res));\n}\n"],"sourceRoot":"/source/"}