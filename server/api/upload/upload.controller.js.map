{"version":3,"sources":["api/upload/upload.controller.js"],"names":["index","show","create","upsert","patch","destroy","upload","dest","array","respondWithResult","res","statusCode","entity","status","json","patchUpdates","patches","apply","err","reject","save","removeEntity","remove","then","end","handleEntityNotFound","handleError","send","req","find","exec","catch","findById","params","id","console","log","bucket","i","files","category","body","fileDetails","description","newfiles","push","nfcall","bind","all","result","message","_id","findOneAndUpdate","setDefaultsOnInsert","runValidators"],"mappings":"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","file":"api/upload/upload.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/uploads              ->  index\n * POST    /api/uploads              ->  create\n * GET     /api/uploads/:id          ->  show\n * PUT     /api/uploads/:id          ->  upsert\n * PATCH   /api/uploads/:id          ->  patch\n * DELETE  /api/uploads/:id          ->  destroy\n */\n\n'use strict';\n\nimport jsonpatch from 'fast-json-patch';\nimport Upload from './upload.model';\nimport Uploader from '../../utilities/file';\nimport multer from 'multer';\nimport Q from 'q';\nvar upload = multer({ dest: './server/uploads/'}).array('photoes',4)\n\nfunction respondWithResult(res, statusCode) {\n  statusCode = statusCode || 200;\n  return function(entity) {\n    if(entity) {\n      return res.status(statusCode).json(entity);\n    }\n    return null;\n  };\n}\n\nfunction patchUpdates(patches) {\n  return function(entity) {\n    try {\n      jsonpatch.apply(entity, patches, /*validate*/ true);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return entity.save();\n  };\n}\n\nfunction removeEntity(res) {\n  return function(entity) {\n    if(entity) {\n      return entity.remove()\n        .then(() => {\n          res.status(204).end();\n        });\n    }\n  };\n}\n\nfunction handleEntityNotFound(res) {\n  return function(entity) {\n    if(!entity) {\n      res.status(404).end();\n      return null;\n    }\n    return entity;\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    res.status(statusCode).send(err);\n  };\n}\n\n// Gets a list of Uploads\nexport function index(req, res) {\n  return Upload.find().exec()\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Gets a single Upload from the DB\nexport function show(req, res) {\n  return Upload.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Creates a new Upload in the DB\nexport function create(req, res) {\n   upload(req, res, function(err) {\n      if(err) {\n        console.log(err);\n        console.log('Error Occured');\n        return;\n      }\n      var bucket = [];\n      for(var i in req.files){\n        req.files[i].category = typeof req.body.fileDetails.category === 'object' ? req.body.fileDetails.category[i] :req.body.fileDetails.category;\n        if (req.files[i].description){\n          req.files[i].description = typeof req.body.fileDetails.description === 'object' ? req.body.fileDetails.description[i] :req.body.fileDetails.description;\n        }\n        var newfiles = new Upload(req.files[i]);\n        bucket.push(Q.nfcall(newfiles.save.bind(newfiles)));\n      }\n      return Q.all(bucket)\n        .then(\n          (result) =>{\n            res.json({message: 'Succesfully uploaded'})\n          }\n        )\n        .catch(handleError(res));\n      // res.end('Your Files Uploaded');\n      // console.log('Photo Uploaded');\n    })\n}\n\n// Upserts the given Upload in the DB at the specified ID\nexport function upsert(req, res) {\n  if(req.body._id) {\n    delete req.body._id;\n  }\n  return Upload.findOneAndUpdate({_id: req.params.id}, req.body, {upsert: true, setDefaultsOnInsert: true, runValidators: true}).exec()\n\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Updates an existing Upload in the DB\nexport function patch(req, res) {\n  if(req.body._id) {\n    delete req.body._id;\n  }\n  return Upload.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(patchUpdates(req.body))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Deletes a Upload from the DB\nexport function destroy(req, res) {\n  return Upload.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(removeEntity(res))\n    .catch(handleError(res));\n}\n"],"sourceRoot":"/source/"}