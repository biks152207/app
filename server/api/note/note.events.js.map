{"version":3,"sources":["api/note/note.events.js"],"names":["NoteEvents","setMaxListeners","events","save","remove","e","event","schema","post","emitEvent","doc","emit","_id"],"mappings":"AAAA;;;;AAIA;;;;;;AAEA;;AACA;;;;;;AACA,IAAIA,aAAa,0BAAjB;;AAEA;AACAA,WAAWC,eAAX,CAA2B,CAA3B;;AAEA;AACA,IAAIC,SAAS;AACXC,QAAM,MADK;AAEXC,UAAQ;AAFG,CAAb;;AAKA;AACA,KAAI,IAAIC,CAAR,IAAaH,MAAb,EAAqB;AACnB,MAAII,QAAQJ,OAAOG,CAAP,CAAZ;AACA,iBAAKE,MAAL,CAAYC,IAAZ,CAAiBH,CAAjB,EAAoBI,UAAUH,KAAV,CAApB;AACD;;AAED,SAASG,SAAT,CAAmBH,KAAnB,EAA0B;AACxB,SAAO,UAASI,GAAT,EAAc;AACnBV,eAAWW,IAAX,CAAgBL,QAAQ,GAAR,GAAcI,IAAIE,GAAlC,EAAuCF,GAAvC;AACAV,eAAWW,IAAX,CAAgBL,KAAhB,EAAuBI,GAAvB;AACD,GAHD;AAID;;kBAEcV,U","file":"api/note/note.events.js","sourcesContent":["/**\n * Note model events\n */\n\n'use strict';\n\nimport {EventEmitter} from 'events';\nimport Note from './note.model';\nvar NoteEvents = new EventEmitter();\n\n// Set max event listeners (0 == unlimited)\nNoteEvents.setMaxListeners(0);\n\n// Model events\nvar events = {\n  save: 'save',\n  remove: 'remove'\n};\n\n// Register the event emitter to the model events\nfor(var e in events) {\n  let event = events[e];\n  Note.schema.post(e, emitEvent(event));\n}\n\nfunction emitEvent(event) {\n  return function(doc) {\n    NoteEvents.emit(event + ':' + doc._id, doc);\n    NoteEvents.emit(event, doc);\n  };\n}\n\nexport default NoteEvents;\n"],"sourceRoot":"/source/"}