{"version":3,"sources":["api/subscription/subscription.model.js"],"names":["SubscriptionSchema","Schema","name","type","String","required","email","lowercase","address","path","validate","emailRegex","test","model"],"mappings":"AAAA;;;;;;AAEA;;;;;;AAEA,IAAIA,qBAAqB,IAAI,mBAASC,MAAb,CAAoB;AAC3CC,QAAM;AACJC,UAAMC,MADF;AAEJC,cAAU;AAFN,GADqC;AAK3CC,SAAO;AACLH,UAAMC,MADD;AAELG,eAAW,IAFN;AAGLF,cAAU;AAHL,GALoC;AAU3CG,WAAS;AACPL,UAAMC,MADC;AAEPC,cAAU;AAFH;AAVkC,CAApB,CAAzB;AAeAL,mBAAmBS,IAAnB,CAAwB,OAAxB,EAAiCC,QAAjC,CAA0C,UAAUJ,KAAV,EAAiB;AACxD,MAAIK,aAAa,uEAAjB;AACA,SAAOA,WAAWC,IAAX,CAAgBN,KAAhB,CAAP,CAFwD,CAEzB;AACjC,CAHD,EAGG,mCAHH;;kBAKe,mBAASO,KAAT,CAAe,cAAf,EAA+Bb,kBAA/B,C","file":"api/subscription/subscription.model.js","sourcesContent":["'use strict';\n\nimport mongoose from 'mongoose';\n\nvar SubscriptionSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true\n  },\n  email: {\n    type: String,\n    lowercase: true,\n    required: true\n  },\n  address: {\n    type: String,\n    required: true\n  }\n});\nSubscriptionSchema.path('email').validate(function (email) {\n   var emailRegex = /^[a-zA-Z0-9.!#$%&â€™*+\\/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n   return emailRegex.test(email); // Assuming email has a text attribute\n}, 'The e-mail field cannot be empty.')\n\nexport default mongoose.model('Subscription', SubscriptionSchema);\n"],"sourceRoot":"/source/"}